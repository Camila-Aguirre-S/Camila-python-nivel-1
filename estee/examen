import random
import json


class Carta:
    def __init__(self, valor, palo):
        self.valor = valor
        self.palo = palo

    def __repr__(self):
        return f"{self.valor} {self.palo}"


class Jugador:
    def __init__(self, nombre):
        self.nombre = nombre
        self.mano = []
        self.puntuacion = 0

    def recibir_carta(self, carta):
        self.mano.append(carta)
        self.actualizar_puntuacion()

    def actualizar_puntuacion(self):
        self.puntuacion = sum(self.obtener_valores_cartas())
        if self.puntuacion > 21 and 11 in self.obtener_valores_cartas():
            self.puntuacion -= 10

    def obtener_valores_cartas(self):
        valores = []
        for carta in self.mano:
            if carta.valor in ["J", "Q", "K"]:
                valores.append(10)
            elif carta.valor == "A":
                valores.append(1)
                valores.append(11)
            else:
                valores.append(int(carta.valor))
        return valores

    def mostrar_mano(self):
        print(f"Mano de {self.nombre}:")
        for carta in self.mano:
            print(carta)
        print(f"Puntuaci√≥n de {self.nombre}: {self.puntuacion}")


class Juego:
    def __init__(self):
        self.jugador = None
        self.casa = Jugador("Casa")
        self.baraja = None
        self.estadisticas = {}

    def menu_principal(self):
        print("----- Juego de 21 -----")
        print("1. Iniciar nuevo juego")
        print("2. Seleccionar usuario")
        print("3. Mostrar estad√≠sticas")
        print("4. Salir")

        seleccion = input("Selecciona una opci√≥n: ")
        if seleccion == "1":
            self.iniciar_nuevo_juego()
        elif seleccion == "2":
            self.seleccionar_usuario()
        elif seleccion == "3":
            self.mostrar_estadisticas()
        elif seleccion == "4":
            print("¬°Hasta luego!")
        else:
            print("Opci√≥n inv√°lida. Intenta nuevamente.")
            self.menu_principal()

    def iniciar_nuevo_juego(self):
        if self.jugador is None:
            print("No se ha seleccionado ning√∫n usuario.")
            self.menu_principal()

        self.baraja = self.crear_baraja()
        self.barajar_cartas()

        self.jugador.mano = []
        self.casa.mano = []

        for _ in range(2):
            self.jugador.recibir_carta(self.extraer_carta())
            self.casa.recibir_carta(self.extraer_carta())

        self.mostrar_estado_juego()
        self.menu_juego()

    def crear_baraja(self):
        valores = [str(n) for n in range(2, 11)] + ["A", "J", "Q", "K"]
        palos = ["‚ô†", "‚ô°", "‚ô¢", "‚ô£"]
        baraja = [Carta(valor, palo) for valor in valores for palo in palos]
        return baraja

    def barajar_cartas(self):
        random.shuffle(self.baraja)

    def extraer_carta(self):
        return self.baraja.pop()

    def menu_juego(self):
        print("\n----- Opciones de Juego -----")
        print("1. Plantarse")
        print("2. Pedir")

        seleccion = input("Selecciona una opci√≥n: ")
        if seleccion == "1":
            self.mostrar_resultado()
        elif seleccion == "2":
            self.jugador.recibir_carta(self.extraer_carta())
            self.mostrar_estado_juego()
            if self.jugador.puntuacion < 21:
                self.menu_juego()
            else:
                self.mostrar_resultado()
        else:
            print("Opci√≥n inv√°lida. Intenta nuevamente.")
            self.menu_juego()

    def mostrar_estado_juego(self):
        self.jugador.mostrar_mano()
        print()
        print("Mano de la casa:")
        print("üÇ†", self.casa.mano[0])
        print()

    def mostrar_resultado(self):
        print("----- Resultado del Juego -----")
        self.casa.mostrar_mano()

        if self.jugador.puntuacion == self.casa.puntuacion:
            print("Empate")
        elif self.jugador.puntuacion > self.casa.puntuacion or self.casa.puntuacion > 21:
            print("¬°Ganaste!")
        else:
            print("¬°Perdiste!")

        self.guardar_estadisticas()
        self.menu_principal()

    def seleccionar_usuario(self):
        nombre = input("Ingresa el nombre del usuario: ")
        self.jugador = Jugador(nombre)
        print(f"Usuario seleccionado: {nombre}")

    def mostrar_estadisticas(self):
        print("\n----- Estad√≠sticas -----")
        if self.jugador is None:
            print("No se ha seleccionado ning√∫n usuario.")
        elif self.jugador.nombre not in self.estadisticas:
            print("No hay estad√≠sticas disponibles para este usuario.")
        else:
            resultados = self.estadisticas[self.jugador.nombre]
            if len(resultados) == 0:
                print("No hay resultados registrados para este usuario.")
            else:
                print(f"Resultados de los √∫ltimos {min(5, len(resultados))} juegos:")
                for resultado in resultados[-5:]:
                    print(resultado)

    def guardar_estadisticas(self):
        if self.jugador is not None:
            if self.jugador.nombre not in self.estadisticas:
                self.estadisticas[self.jugador.nombre] = []
            resultado = "Ganado" if self.jugador.puntuacion > self.casa.puntuacion else "Perdido"
            self.estadisticas[self.jugador.nombre].append(resultado)
            self.guardar_estadisticas_en_archivo()

    def cargar_estadisticas(self):
        try:
            with open("estadisticas.json", "r") as archivo:
                self.estadisticas = json.load(archivo)
        except FileNotFoundError:
            self.estadisticas = {}

    def guardar_estadisticas_en_archivo(self):
        with open("estadisticas.json", "w") as archivo:
            json.dump(self.estadisticas, archivo)

juego = Juego()
juego.cargar_estadisticas()
juego.menu_principal()

