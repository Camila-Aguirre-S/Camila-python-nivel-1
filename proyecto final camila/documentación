# Documentación Externa - Juego de Blackjack

Este proyecto consiste en la creación de un juego de Blackjack en Python. El juego se divide en varios módulos y sigue las reglas clásicas del Blackjack.

## Módulo `juego`

El módulo `juego` es el módulo principal del juego de Blackjack. Contiene la clase `Juego`, que representa el juego en sí. La clase tiene los siguientes atributos y métodos:

- Atributos:
  - `baraja`: Instancia de la clase `Baraja` que representa la baraja de cartas.
  - `jugador`: Instancia de la clase `Jugador` que representa al jugador.
  - `casa`: Instancia de la clase `Jugador` que representa a la casa.
  - `estadisticas`: Lista que guarda las estadísticas de las partidas jugadas.

- Métodos:
  - `jugar()`: Función principal para iniciar el juego.
  - `seleccionar_usuario()`: Función para seleccionar el nombe del jugador.
  - `iniciar_juego()`: Función para iniciar un nuevo juego.
  - `pedir_carta()`: Función para que el jugador pida una carta adicional.
  - `plantarse()`: Función para que el jugador se plante y jugar la ronda de la casa.
  - `jugar_ronda_casa()`: Función para jugar la ronda de la casa.
  - `mostrar_estado_juego()`: Función para mostrar el estado actual del juego.
  - `guardar_estadisticas(resultado)`: Función para guardar las estadísticas de la partida.
  - `mostrar_estadisticas()`: Función para mostrar las estadísticas de las últimas partidas.
  - `jugar_otra_partida()`: Función para preguntar si se desea jugar otra partida.

## Módulo `jugador`

El módulo `jugador` define la clase `Jugador` que representa a un jugador en el juego de Blackjack. La clase tiene los siguientes atributos y métodos:

- Atributos:
  - `nombre`: Nombre del jugador.
  - `cartas`: Lista de cartas en la mano del jugador.

- Métodos:
  - `recibir_carta(carta)`: Agrega una carta a la mano del jugador.
  - `mostrar_cartas()`: Muestra las cartas en la mano del jugador.
  - `valor_total()`: Calcula el valor total de las cartas en la mano del jugador.

## Módulo `baraja`

El módulo `baraja` define la clase `Baraja` que representa una baraja de cartas en el juego de Blackjack. La clase tiene los siguientes atributos y métodos:

- Atributos:
  - `palos`: Lista de palos de las cartas (corazones, diamantes, tréboles, picas).
  - `valores`: Lista de valores de las cartas (A, 2, 3, ..., 10, J, Q, K).
  - `cartas`: Lista de todas las cartas en la baraja.

- Métodos:
  - `mezclar()`: Mezcla las cartas de la baraja.
  - `repartir_carta()`: Reparte una carta de la baraja.

## Módulo `estadisticas`

El módulo `estadisticas` contiene funciones para guardar y cargar las estadísticas del juego. Las funciones son:

- `guardar_estadisticas(resultado)`: Guarda el resultado de una partida en un archivo.
- `cargar_estadisticas()`: Carga las estadísticas guardadas desde un archivo.

## Código  Ejecución

```python
from jugador import Jugador
from estadisticas import guardar_estadisticas, cargar_estadisticas
from baraja import Baraja
import random

class Juego:
    ...
    # Código del juego omitido para mayor claridad
    ...

# Código de ejecución del juego
juego = Juego()
juego.jugar()


Se usó una logica con esta reglas: 

Hacer un programa que incluya
un modulo para barajar las 52 cartas concodigo unicode de la casa 
y del jugador (2 cartas)
la opción de:
a). Al inicio del juego se debe seleccionar un usuario o crear uno nuevo.
que se guarde el nombre y el resultado de la partida en un archivo 
 b. Nuevo juego: inicia un juego nuevo con el usuario seleccionado. y que suceceda lo siguiente :
El crupier reparte dos cartas boca arriba a cada jugador y se reparte a sí mismo una carta boca arriba y otra boca abajo(NO SE PUEDE MOSTRAR).
darle al jugador las opciones:
"Plantarse" o :se avanza en el juego y se imprime el resultado que lleva , se pasa al paso 3.
"Pedir" o  una carta adicional para intentar mejorar su mano:
elegir al hazar una  carta
imprimir las 3 cartas que tendria en el momento
sumarlo a la puntuación 


Después el crupier revela su carta boca abajo(imprimir). Si la suma de su mano es 16 o menos, debe pedir una carta adicional (imprimir). Si la suma es de 17 o más, el crupier debe plantarse (elegir al hazar una carta mas e imprimirla).
Si el jugador tiene una mano con un valor total superior a 21, se considera "pasado" o "quemado", lo que significa que pierde su apuesta. Si el crupier se pasa de 21, todos los jugadores que aún estén en el juego ganan.

Si la suma de la mano del crupier es mayor que la del jugador sin pasarse de 21, el jugador pierde su apuesta. Si la suma de la mano del jugador es mayor que la del crupier sin pasarse de 21, el jugador gana.
si ninguno pierde se vuelve de nuevo al punto 2. darle al jugador la opcion de plantarse o pedir

La casa, al ser manejada por la computadora, debe seguir una lógica predeterminada, por ejemplo que siempre pida carta si su mano suma menos de 19. 6. Debe implementar algunas de las manos especiales del 21: tres sietes, cinco menores y blackjack. Si un jugador tiene alguna de estas manos, gana automáticamente. 7. El juego debe almacenar los datos del usuario y las estadísticas en archivos de texto que serán creados por la aplicación. Usted puede decidir cuántos archivos de texto crear para lograr los resultados especificados en estos requerimientos.
El código debe estar organizado en módulos y en clases. Se deben utilizar los conocimientos adquiridos sobre programación orientada a objetos (OOP). Usted debe decidir cuáles clases necesita crear para representar los elementos del juego. Referencia sobre diseño orientado a objetos: https://en.wikipedia.org/wiki/Object-oriented_design


 c. Estadísticas: muestra las estadísticas del usuario seleccionado. Estas estadísticas deben ser por lo menos los resultados de los últimos 5 juegos del usuario.
 d. Salir
